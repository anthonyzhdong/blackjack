// App.jsx
import React from 'react';
import Card from './Card';
import './App.css';

// collection of cards and their associated values
const cardData = [
  { value: 1, img: './cards/ace_of_spades.svg' },
  { value: 2, img: './cards/2_of_spades.svg' },
  { value: 3, img: './cards/3_of_spades.svg' },
  { value: 4, img: './cards/4_of_spades.svg' },
  { value: 5, img: './cards/5_of_spades.svg' },
  { value: 6, img: './cards/6_of_spades.svg' },
  { value: 7, img: './cards/7_of_spades.svg' },
  { value: 8, img: './cards/8_of_spades.svg' },
  { value: 9, img: './cards/9_of_spades.svg' },
  { value: 10, img: './cards/10_of_spades.svg' },
  { value: 10, img: './cards/jack_of_spades2.svg' },
  { value: 10, img: './cards/queen_of_spades2.svg' },
  { value: 10, img: './cards/king_of_spades2.svg' },
  { value: 1, img: './cards/ace_of_clubs.svg' },
  { value: 2, img: './cards/2_of_clubs.svg' },
  { value: 3, img: './cards/3_of_clubs.svg' },
  { value: 4, img: './cards/4_of_clubs.svg' },
  { value: 5, img: './cards/5_of_clubs.svg' },
  { value: 6, img: './cards/6_of_clubs.svg' },
  { value: 7, img: './cards/7_of_clubs.svg' },
  { value: 8, img: './cards/8_of_clubs.svg' },
  { value: 9, img: './cards/9_of_clubs.svg' },
  { value: 10, img: './cards/10_of_clubs.svg' },
  { value: 10, img: './cards/jack_of_clubs2.svg' },
  { value: 10, img: './cards/queen_of_clubs2.svg' },
  { value: 10, img: './cards/king_of_clubs2.svg' },
  { value: 1, img: './cards/ace_of_hearts.svg' },
  { value: 2, img: './cards/2_of_hearts.svg' },
  { value: 3, img: './cards/3_of_hearts.svg' },
  { value: 4, img: './cards/4_of_hearts.svg' },
  { value: 5, img: './cards/5_of_hearts.svg' },
  { value: 6, img: './cards/6_of_hearts.svg' },
  { value: 7, img: './cards/7_of_hearts.svg' },
  { value: 8, img: './cards/8_of_hearts.svg' },
  { value: 9, img: './cards/9_of_hearts.svg' },
  { value: 10, img: './cards/10_of_hearts.svg' },
  { value: 10, img: './cards/jack_of_hearts2.svg' },
  { value: 10, img: './cards/queen_of_hearts2.svg' },
  { value: 10, img: './cards/king_of_hearts2.svg' },
  { value: 1, img: './cards/ace_of_diamonds.svg' },
  { value: 2, img: './cards/2_of_diamonds.svg' },
  { value: 3, img: './cards/3_of_diamonds.svg' },
  { value: 4, img: './cards/4_of_diamonds.svg' },
  { value: 5, img: './cards/5_of_diamonds.svg' },
  { value: 6, img: './cards/6_of_diamonds.svg' },
  { value: 7, img: './cards/7_of_diamonds.svg' },
  { value: 8, img: './cards/8_of_diamonds.svg' },
  { value: 9, img: './cards/9_of_diamonds.svg' },
  { value: 10, img: './cards/10_of_diamonds.svg' },
  { value: 10, img: './cards/jack_of_diamonds2.svg' },
  { value: 10, img: './cards/queen_of_diamonds2.svg' },
  { value: 10, img: './cards/king_of_diamonds2.svg' },
];

function App() {
  const [playerScore, setPlayerScore] = React.useState(0);
  const [playerHand, setPlayerHand] = React.useState([]);
  const [dealerScore, setDealerScore] = React.useState(0);
  const [dealerHand, setDealerHand] = React.useState([]);

  const [dealtCards, setDealtCards] = React.useState(new Set());

  const [aceChoice, setAceChoice] = React.useState(false);
  const [aceCardIndex, setAceCardIndex] = React.useState(null);

  const [playerTurn, setPlayerTurn] = React.useState(true);
  const [gameOver, setGameOver] = React.useState(false);


  React.useEffect(() => {
    dealInitialCards();
  }, []);


  // buggggg

  React.useEffect(() => {
    // Check if score exceeds 21 and hand contains an Ace valued at 11
    if (playerScore > 21) {
      let adjustedScore = playerScore;
      let aceCount = playerHand.reduce((count, cardIndex) => {
        if (cardData[cardIndex].value === 1) {
          count++;
        }
        return count;
      }, 0);
  
      // Adjust the score by converting Aces from 11 to 1 until the score is less than or equal to 21
      while (adjustedScore > 21 && aceCount > 0) {
        adjustedScore -= 10; // Convert Ace from 11 to 1
        aceCount--;
      }
  
      // If the adjusted score is still greater than 21, the game is over
      if (adjustedScore > 21) {
        setGameOver(true);
      }
  
      // Update the player score with the adjusted score
      setPlayerScore(adjustedScore);
    }
  }, [playerHand, playerScore]);


  ////////////

  // dealers turn and game isn't over, deal dealers cards
  React.useEffect(() => {
    if (!playerTurn && !gameOver) {
      dealDealerCards();
    }
  }, [playerTurn, gameOver]);

  // deals random card and adds to dealtCards
  function dealRandomCard(dealtCards) {
    let newCardIndex;
    do {
      newCardIndex = Math.floor(Math.random() * cardData.length);
    } while (dealtCards.has(newCardIndex));

    dealtCards.add(newCardIndex);
    return newCardIndex;
  }

  // deals initial hand for player and dealer
  function dealInitialCards() {
    const newPlayerHand = [];
    let newPlayerScore = 0;

    const newDealerHand = [];
    let newDealerScore = 0;

    const newDealtCards = new Set();
    for (let i = 0; i < 2; i++) {
      const newPlayerCardIndex = dealRandomCard(newDealtCards);
      newPlayerHand.push(newPlayerCardIndex);
      // ace check to determine if we want 1 or 11
      if (cardData[newPlayerCardIndex].value !== 1) {
        newPlayerScore += cardData[newPlayerCardIndex].value;
      } else {
        setAceChoice(true);
        setAceCardIndex(newPlayerCardIndex);
      }

      const newDealerCardIndex = dealRandomCard(newDealtCards);
      newDealerHand.push(newDealerCardIndex);
      newDealerScore += cardData[newDealerCardIndex].value;
    }

    setPlayerHand(newPlayerHand);
    setPlayerScore(newPlayerScore);
    setDealerHand(newDealerHand);
    setDealerScore(newDealerScore);
    setDealtCards(newDealtCards);
  }

  // adds new card to players hand
  function addNewCard() {
    if (!aceChoice && playerTurn && !gameOver) {
      // gets random card
      const newCardIndex = dealRandomCard(dealtCards);


      // buggggg


      if (cardData[newCardIndex].value === 1 && playerScore + 11 <= 21 && playerHand.includes(0)) {
        setPlayerHand((prevHand) => [...prevHand, newCardIndex]);
        setPlayerScore((prevScore) => prevScore + 11); // Count Ace as 11
        return;
      }

      /////////

      // new hand = previous + new card
      setPlayerHand((prevHand) => [...prevHand, newCardIndex]);
      setPlayerScore((prevScore) => {
        let newScore = prevScore + cardData[newCardIndex].value;
        
        
  
        return newScore;
      });
      
    }
  }
  // resets game state
  function clearHand() {
    setPlayerHand([]);
    setPlayerScore(0);
    setDealerHand([]);
    setDealerScore(0);
    setDealtCards(new Set());
    setAceChoice(false);
    setAceCardIndex(null);
    setPlayerTurn(true);
    setGameOver(false);
    dealInitialCards();
  }

  // sets hand with chosen ace value
  function handleAceChoice(value) {
    //setPlayerHand((prevHand) => [...prevHand, aceCardIndex]);
    setPlayerScore((prevScore) => {
      const newScore = prevScore + value;
      // if score is over 21 and they choose 11, make ace a 1
      if(newScore > 21 && value === 11){
        newScore -=10;
      }
      if (newScore > 21){
        setGameOver(true);
      } 
      return newScore;
    });
    setAceChoice(false);
    setAceCardIndex(null);
  }

  // stand = dealers turn
  function handleStand() {
    setPlayerTurn(false);
  }


  function dealDealerCards() {
    // gets existing dealer hand
    let newDealerScore = dealerScore;
    const newDealerHand = [...dealerHand];
    // dealer must draw on 16 or less
    while (newDealerScore < 17) {
      const newCardIndex = dealRandomCard(dealtCards);
      newDealerHand.push(newCardIndex);
      newDealerScore += cardData[newCardIndex].value;
    }
    setDealerHand(newDealerHand);
    setDealerScore(newDealerScore);
    setGameOver(true);
  }

  function determineWinner() {
    if (playerScore > 21) return 'You lost!';
    if (dealerScore > 21 || playerScore > dealerScore) return 'You won!';
    if (playerScore < dealerScore) return 'You lost!';
    return 'It\'s a tie!';
  }
//  <h1>Blackjack</h1>
  return (
    <div className="App">
      <button onClick={clearHand}>New Game</button>
      <p>Dealer's Hand ({gameOver ? dealerScore : '?'})</p>
      <div className="hand">
        {dealerHand.map((c, index) =>
          index === 0 || gameOver ? (
            <Card key={index} card={cardData[c]} />
          ) : (
            <Card key={index} card={{ img: './cards/back_of_card.svg' }} />
          )
        )}
      </div>
      <p>Your Hand ({playerScore})</p>
      <div className="hand">
        {playerHand.map((c, index) => (
          <Card key={index} card={cardData[c]} />
        ))}
      </div>
      
      {aceChoice && (
        <div>
          <button onClick={() => handleAceChoice(1)}>Count Ace as 1</button>
          <button onClick={() => handleAceChoice(11)}>Count Ace as 11</button>
        </div>
      )}
      {!gameOver && (
        <div>
          <button onClick={addNewCard} disabled={playerScore >= 21 || aceChoice}>Hit</button>
          <button onClick={handleStand} disabled = {aceChoice}>Stand</button>
        </div>
      )}
      
      {gameOver && <h1>{determineWinner()}</h1>}
    </div>
  );
}

export default App;

